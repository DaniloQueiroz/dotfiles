#!/usr/bin/env python3
import configparser
from dataclasses import dataclass
from datetime import datetime, timezone
from typing import List, Optional

import click
import requests
import json
import time
from pathlib import Path


TOGGL_API_URL = "https://api.track.toggl.com/api/v9"


@dataclass
class Config:
    workspace_id: int
    api_key: str

    @staticmethod
    def load_config(file_path: Path) -> "Config":
        config = configparser.ConfigParser()
        config.read(file_path)
    
        workspace_id = int(config.get("toggl", "workspace_id"))
        api_key = config.get("toggl", "api_key")
    
        return Config(workspace_id=workspace_id, api_key=api_key)


@dataclass
class Project:
    id: int
    name: str

    def __str__(self):
        return f"{self.name}"

    @staticmethod
    def from_json(json_project) -> "Project":
        return Project(json_project["id"], json_project["name"])


@dataclass
class TimeEntry:
    id: str
    workspace_id: str
    description: str
    duration: str
    project: str
    tags: List[str]

    def __str__(self):
        return f"{self.description} ({self.duration}) {self.project}/{','.join(self.tags)}"

    @staticmethod
    def from_json(json_entry) -> "TimeEntry":
        return TimeEntry(
            json_entry["id"],
            json_entry["workspace_id"],
            json_entry["description"],
            epoch_to_relative_time(json_entry["duration"]),
            get_project_name_by_id(json_entry["pid"]),
            json_entry["tags"],
        )

def now() -> str:
    return datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%fZ')


def epoch_to_relative_time(epoch_time) -> str:
    if epoch_time < 0:
        epoch_time *= -1

    target_time = datetime.fromtimestamp(epoch_time)
    time_difference = datetime.now() - target_time

    total_minutes = int(time_difference.total_seconds() // 60)
    hours, minutes = divmod(total_minutes, 60)
    return f"{hours}:{minutes:02}"


def get_tags():
    response = requests.get(
        f"{TOGGL_API_URL}/me/tags",
        auth=(_config.api_key, "api_token")
    )
    return map(lambda x: x["name"], response.json())


def get_projects():
    response = requests.get(
        f"{TOGGL_API_URL}/me/projects",
        auth=(_config.api_key, "api_token")
    )

    if response.status_code != 200:
        print(f"Failed to retrieve projects. Status code: {response.status_code}")
        return None
    return map(Project.from_json, response.json())


def get_project_name_by_id(project_id):
    projects = list(get_projects())
    for project in projects:
        if project.id == project_id:
            return project.name
    else:
        return None


def get_project_id_by_name(project_name):
    projects = get_projects()
    for project in projects:
        if project.name == project_name:
            return project.id
    else:
        return None


def get_current_time_entry():
    response = requests.get(
        f"{TOGGL_API_URL}/me/time_entries/current",
        auth=(_config.api_key, "api_token")
    )

    if response.status_code == 200 and response.json() is not None:
        return TimeEntry.from_json(response.json())
    else:
        return None


def stop_current_time_entry():
    time_entry = get_current_time_entry()

    if time_entry is None:
        return None

    response = requests.patch(
        f"{TOGGL_API_URL}/workspaces/{time_entry.workspace_id}/time_entries/{time_entry.id}/stop",
        auth=(_config.api_key, "api_token")
    )

    if response.status_code == 200:
        return time_entry
    else:
        print(f"Failed to stop current time entry. Status code: {response.status_code}")


def create_new_time_entry(description, project_name, tags) -> Optional[TimeEntry]:
    project_id = get_project_id_by_name(project_name)
    
    payload = {
        "description": description,
        "pid": project_id,
        "tags": tags.split(",") if tags else [],
        "start": now(),
        "duration": int(-1 * time.time()),
        "stop": None,
        "wid": _config.workspace_id,
        "created_with": "gpt-toogl-cli"
    }

    response = requests.post(
        f"{TOGGL_API_URL}/workspaces/{_config.workspace_id}/time_entries",
        auth=(_config.api_key, "api_token"),
        headers={"Content-Type": "application/json"},
        data=json.dumps(payload)
    )

    if response.status_code == 200:
        return TimeEntry.from_json(response.json())
    else:
        print(response.text)
        return None


#  cli interface
TOGGL_CONFIG_FILE = Path.home().joinpath(".local", "share", "toggl", "config")
_config: Optional[Config] = None


@click.group()
def toggl():
    global _config
    _config = Config.load_config(TOGGL_CONFIG_FILE)


@toggl.command()
@click.option('--short', is_flag=True)
def get(short):
    current_time_entry = get_current_time_entry()

    if current_time_entry is None:
        click.echo("No project active")
    elif short:
        click.echo(f"{current_time_entry.description} ({current_time_entry.duration})")
    else:
        click.echo(current_time_entry)


@toggl.command()
def stop():
    entry = stop_current_time_entry()
    if entry:
        click.secho(f"Task {entry.description} ({entry.project}) stopped.")


@toggl.command()
def start():
    description = click.prompt("Task descripton", type=str)
    projects_names = map(lambda x: x.name, get_projects())
    click.echo(f"Choose one project: {list(projects_names)}")
    project = click.prompt("Project name", type=str)
    click.echo(f"Existing tags: {list(get_tags())}")
    tags = click.prompt("Tags (comma separated)", type=str)

    entry = create_new_time_entry(description, project, tags)
    if entry:
        click.secho(entry)
    else:
        click.secho("Unable to create entry")


@toggl.command()
def details():
    my_projects = get_projects()
    if my_projects is None:
        click.echo("No project found")
    else:
        click.secho("Projects:", bold=True)
        for project in my_projects:
            click.echo(f" - {project}")

    my_tags = get_tags()
    if my_tags is None:
        click.echo("No tags found")
    else:
        click.secho("Tags:", bold=True)
        for tag in my_tags:
            click.echo(f" - {tag}")


if __name__ == "__main__":
    toggl() 
